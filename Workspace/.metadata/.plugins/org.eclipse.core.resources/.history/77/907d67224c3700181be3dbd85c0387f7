/****************************************************************************************
 *
 *                  Moving Average Filter
 *                  Franco J. Polo - fjpolo@gmail.com
 *                          2018
 *
 ****************************************************************************************/

/*
 * Includes
 */
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"

/*
 * Global signals
 */

// Sine @ 50Hz
const float sine[50] = {0.00000,   0.58779,   0.95106,   0.95106,   0.58779,
                        0.00000,  -0.58779,  -0.95106,  -0.95106,  -0.58779,
                        0.00000,   0.58779,   0.95106,   0.95106,   0.58779,
                        0.00000,  -0.58779,  -0.95106,  -0.95106,  -0.58779,
                        0.00000,   0.58779,   0.95106,   0.95106,   0.58779,
                        0.00000,  -0.58779,  -0.95106,  -0.95106,  -0.58779,
                        0.00000,   0.58779,   0.95106,   0.95106,   0.58779,
                        0.00000,  -0.58779,  -0.95106,  -0.95106,  -0.58779,
                        0.00000,   0.58779,   0.95106,   0.95106,   0.58779,
                        0.00000,  -0.58779,  -0.95106,  -0.95106,  -0.58779};

//Noisy sine @ 50Hz
const float noisysine[50] = {0.516103,   1.725424,   2.025208,   2.532391,   1.709973,
                             1.298276,   0.551888,  -0.144230,   0.132277,   0.204097,
                             1.521347,   0.888890,   1.984780,   1.988352,   1.512257,
                             0.613279,   1.164040,   0.184014,  -0.280071,   0.879501,
                             0.500269,   1.812989,   2.982865,   1.758536,   1.232334,
                             0.899834,  -0.197860,   0.576230,   0.113202,   0.359972,
                             1.866314,   1.174361,   2.165136,   1.204856,   2.636195,
                             1.204906,   1.300884,  -0.030281,  -1.173993,   0.715174,
                             1.751604,   2.011665,   2.073450,   2.586382,   1.678207,
                             0.610072,   0.218001,  -0.528626,  -0.991873,  -0.075452};
// Output
float y[50];

/******************
 * MAIN
 *****************/
int main(void)
{
    // Initializtion
	uint8_t ui8LED = 2;
	SysCtlClockSet(SYSCTL_SYSDIV_4|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);

	// Output to zero
	int i=0;
	for(i=0;i<=49;i++){
	    y[i] = 0;
	}
	/*
	// Filter using 3 samples
	for(i=0;i<=47;i++){
	    y[i] = (noisysine[i]+noisysine[i+1]+noisysine[i+2])/3;
	}
	y[48] = (noisysine[47]+noisysine[48]+noisysine[49])/3;
	y[49] = noisysine[49];
	*/
    // Filter using 5 samples
    for(i=0;i<=45;i++){
        y[i] = (noisysine[i]+noisysine[i+1]+noisysine[i+2]+noisysine[i+3]+noisysine[i+4])/5;
    }
    y[46] = (noisysine[45]+noisysine[46]+noisysine[47])/3;
    y[47] = (noisysine[46]+noisysine[47]+noisysine[48])/3;
    y[48] = (noisysine[47]+noisysine[48]+noisysine[49])/3;
    y[49] = noisysine[49];

	while(1)
	{
		// Turn on the LED
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, ui8LED);
		// Delay for a bit
		SysCtlDelay(2000000);
		// Cycle through Red, Green and Blue LEDs
		if (ui8LED == 8) {ui8LED = 2;} else {ui8LED = ui8LED*2;}
	}
}
